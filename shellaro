#!/usr/bin/env bash
#
# shellaro -- a terminal music player

# CONFIG

# The directory Shellaro looks in for music
MUSIC_DIRECTORY=~/Music

# Shortcuts corresponding to number keys
SHORTCUT_1=~/Music/LedZeppelin
SHORTCUT_2=~/Music/MotleyCrue
SHORTCUT_3=~/Music/SlightlyStoopid
SHORTCUT_4=~/Music/Sublime
SHORTCUT_5=~/Music/TheDoors
SHORTCUT_6=~/Music/TheRollingStones
SHORTCUT_7=~/Music/TheWho
SHORTCUT_8=~/Music/VanHalen
SHORTCUT_9=~/Music/OTHER

# Status line
COLOR_PLAYING=42 # Green
COLOR_PAUSED=47 # White
COLOR_STOPPED=47
COLOR_MUTED=41 # Red

# Cursor color
COLOR_CURSOR=37

# Directories
COLOR_DIR=34 # Blue
COLOR_DIR_BOLD=1 # Bold

# Color of currently playing song
COLOR_CURRENT_SONG=32 # Green
COLOR_CURRENT_SONG_BOLD=1

# Other
COLOR_OTHER=37
COLOR_OTHER_BOLD=0

# Marked files
COLOR_MARKED=33 # Yellow
COLOR_MARKED_BOLD=1
ICON_MARKED="›"

# Status line icons
ICON_PLAYING="▷"
ICON_PAUSED="◫"
ICON_STOPPED="□"
ICON_MUTED="MUTE"

setup_terminal() {
    printf '\e[?7l\e[?25l\e[2J\e[1;%sr' "$max_items"

    # Hide input
    stty -echo
}

reset_terminal() {
    printf '\e[?7h\e[?25h\e[2J\e[;r'

    # Show input
    stty echo
}

clear_screen() {
    printf '\e[%sH\e[9999C\e[1J%b\e[1;%sr' \
           "$((LINES-2))" "${TMUX:+\e[2J}" "$max_items"
}

setup_options() {
    # Format for normal files
    [[ $FILE_FORMAT == *%f* ]] && {
        file_pre="${FILE_FORMAT/'%f'*}"
        file_post="${FILE_FORMAT/*'%f'}"
    }

    # Format for marked files
    [[ $MARK_FORMAT == *%f* ]] && {
        mark_pre="${MARK_FORMAT/'%f'*}"
        mark_post="${MARK_FORMAT/*'%f'}"
    }
}

get_term_size() {
    read -r LINES COLUMNS < <(stty size)

    # Max list items that fit in the scroll area
    # Leave 2 lines at the bottom for status & cmd line
    ((max_items=LINES-2))
}

set_initial_status() {
    if [ -n "$(pgrep mpg321)" ]; then
        if [[ $(ps -o s= -p "$(pgrep mpg321)") == "S" ]]; then
            IS_PAUSED=false
        elif [[ $(ps -o s= -p "$(pgrep mpg321)") == "T" ]]; then
            IS_PAUSED=true
        fi

        if [ -n "$(amixer -D pulse get Master | grep '\[off\]')" ]; then
            IS_MUTED=true
        else
            IS_MUTED=false
        fi
    fi
}

status_line() {
    local mark_ui="   [${#marked_files[@]}]"

    NOW_PLAYING=$(readlink -f /proc/$(pgrep mpg321)/fd/3 | awk -F "/" '{print $NF}')

    if [[ $IS_PAUSED == true ]]; then
        local ICON="${ICON_PAUSED}"
        local COLOR="${COLOR_PAUSED}"
    else
        local ICON="${ICON_PLAYING}"
        local COLOR="${COLOR_PLAYING}"
    fi

    if [[ $IS_MUTED == true ]]; then
        local VOL="${ICON_MUTED}"
        local COLOR="${COLOR_MUTED}"
    else
        local VOL=$(amixer -D pulse get Master | grep -m1 "  Front" | awk -F '[\[\]]' '{print $2" "}')
    fi

    if [ -n "$(pgrep mpg321)" ]; then
        local ICON="${ICON}"
        local COLOR="${COLOR}"
    else
        local ICON="${ICON_STOPPED}"
        local COLOR="${COLOR_STOPPED}"
    fi

    format_status_line="${ICON} ${VOL}  ${NOW_PLAYING}"

    printf '\e7\e[?6l\e[%sH\e[30;%sm %s%s\e[K\e[m\n\e[K\e[?6h\e8' \
           "$((LINES-1))" \
           "${COLOR}" \
           "${format_status_line:-/}" \
           "${marked_files[*]:+${mark_ui}}"
}

read_dir() {
    local dirs=()
    local files=()
    local item_index

    for item in "$PWD"/*; do
        if [[ -d $item ]]; then
            dirs+=("$item")
            ((item_index++))

            [[ $item == "$OLDPWD" ]] &&
                ((previous_index=item_index))
        else
            files+=("$item")
        fi
    done

    list=("${dirs[@]}" "${files[@]}")

    [[ -z ${list[0]} ]] &&
        list[0]="empty"

    ((list_total=${#list[@]}-1))

    # Save the original dir in a second list as a backup
    cur_list=("${list[@]}")
}

format_line() {
    local file_name="${list[$1]##*/}"
    local file_ext="${file_name##*.}"
    local format
    local suffix

    # If the dir is empty, return
    if [[ -z ${list[$1]} ]]; then
        return

    elif [[ -d ${list[$1]} ]]; then
        format+="\\e[${fi:-${COLOR_DIR_BOLD};${COLOR_DIR}}m"
        suffix+='/'

    elif [[ ${list[$1]} == *${NOW_PLAYING} ]] && [[ ${NOW_PLAYING} == *".mp3" ]]; then
        format+="\\e[${fi:-${COLOR_CURRENT_SONG_BOLD};${COLOR_CURRENT_SONG}m}"
        suffix+='♫ '

    else
        format+="\\e[${fi:-${COLOR_OTHER_BOLD};${COLOR_OTHER}}m"
    fi

    # If the item is under the cursor
    (($1 == scroll)) &&
        format+="\\e[1;${COLOR_CURSOR};7m"

    # If the item is marked
    [[ ${marked_files[$1]} == "${list[$1]:-null}" ]] && {
        format+="\\e[${COLOR_MARKED_BOLD};${COLOR_MARKED}m${ICON_MARKED} "
    }

    # Escape the directory string
    file_name="${file_name//[^[:print:]]/^[}"

    printf '\r%b%s\e[m\r' "$format" "${file_name}${suffix}"
}

draw_dir() {
    # Print the max directory items that fit in the scroll area
    local scroll_start="$scroll"
    local scroll_new_pos
    local scroll_end

    # When going up the directory tree, place the cursor on the position
    # of the previous directory
    ((find_previous == 1)) && {
        ((scroll_start=previous_index-1))
        ((scroll=scroll_start))

        find_previous=
    }

    # If current dir is near the top of the list, keep scroll position
    if ((list_total < max_items || scroll < max_items/2)); then
        ((scroll_start=0))
        ((scroll_end=max_items))
        ((scroll_new_pos=scroll + 1))

    # If curent dir is near the end of the list, keep scroll position
    elif ((list_total - scroll < max_items/2)); then
        ((scroll_start=list_total - max_items + 1))
        ((scroll_new_pos=max_items - (list_total-scroll)))
        ((scroll_end=list_total+1))

    # If current dir is somewhere in the middle, center scroll position
    else
        ((scroll_start=scroll-max_items/2))
        ((scroll_end=scroll_start+max_items))
        ((scroll_new_pos=max_items/2+1))
    fi

    # Reset cursor position
    printf '\e[H'

    for ((i=scroll_start;i<scroll_end;i++)); {
        # Don't print one too many newlines
        ((i > scroll_start)) &&
            printf '\n'

        format_line "$i"
    }

    # Move the cursor to its new position if it changed
    printf '\e[%sH' "$scroll_new_pos"
    ((y=scroll_new_pos))
}

redraw() {
    [[ $1 == full ]] && {
        read_dir
        scroll=0
    }

    clear_screen
    draw_dir
    status_line
}

mark() {
    [[ ${list[0]} == empty && -z ${list[1]} ]] &&
        return

    if [[ $1 == all ]]; then
        if ((${#marked_files[@]} != ${#list[@]})); then
            marked_files=("${list[@]}")
            mark_dir="$PWD"
        else
            marked_files=()
        fi

        redraw
    else
        if [[ ${marked_files[$1]} == "${list[$1]}" ]]; then
            unset 'marked_files[scroll]'

        else
            marked_files[$1]="${list[$1]}"
            mark_dir="$PWD"
        fi

        # Clear line before changing it
        printf '\e[K'
        format_line "$1"
    fi

    status_line
}

open() {
    if [[ -d $1/ ]]; then
        search=
        search_end_early=
        previous_dir="$PWD"
        cd "${1:-/}" ||:
        redraw full

    elif [[ -f $1 ]]; then
        # Figure out file type
        nohup "${FILE_OPENER:-${opener:-xdg-open}}" "$1" &>/dev/null &
        disown
    fi
}

cmd_line() {
    cmd_reply=

    printf '\e7\e[%sH\e[?25h' "$LINES"

    while IFS= read -rsn 1 -p $'\r\e[K'"${1}${cmd_reply}" read_reply; do
        case "$read_reply" in
            # Backspace
            $'\177'|$'\b')
                cmd_reply="${cmd_reply%?}"

                # Clear tab-completion
                unset comp c
            ;;

            # Tab
            $'\t')
                comp_glob="$cmd_reply*"

                # Pass the argument dirs to limit completion to directories
                [[ $2 == dirs ]] &&
                    comp_glob="$cmd_reply*/"

                # Generate a completion list once
                [[ -z ${comp[0]} ]] &&
                    IFS=$'\n' read -d "" -ra comp < <(compgen -G "$comp_glob")

                # On each tab press, cycle through the completion list
                [[ -n ${comp[c]} ]] && {
                    cmd_reply="${comp[c]}"
                    ((c=c >= ${#comp[@]}-1 ? 0 : ++c))
                }
            ;;

            # Escape / Custom 'no' value (used as a replacement for '-n 1')
            $'\e'|"${3:-null}")
                cmd_reply=
                break
            ;;

            # Enter/Return
            "")
                # If there's only one search result and its a directory,
                # enter it on one enter keypress
                [[ $2 == search && -d ${list[0]} ]] && ((list_total == 0)) && {
                    # '\e[?25l': Hide the cursor
                    printf '\e[?25l'

                    open "${list[0]}"
                    search_end_early=1

                    # Unset tab completion variables since we're done
                    unset comp c
                    return
                }

                break
            ;;

            # Custom 'yes' value (used as a replacement for '-n 1')
            "${2:-null}")
                cmd_reply="$read_reply"
                break
            ;;

            # Anything else, add it to read reply
            " "|*)
                cmd_reply+="$read_reply"

                # Clear tab-completion
                unset comp c
            ;;
        esac

        # Search on keypress if search passed as an argument
        [[ $2 == search ]] && {
            # '\e[?25l': Hide the cursor
            printf '\e[?25l'

            # Use a greedy glob to search
            list=("$PWD"/*"$cmd_reply"*)
            ((list_total=${#list[@]}-1))

            # Draw the search results on screen
            scroll=0
            redraw

            # '\e[%sH':  Move cursor back to cmd-line
            # '\e[?25h': Unhide the cursor
            printf '\e[%sH\e[?25h' "$LINES"
        }
    done

    # Unset tab completion
    unset comp c

    printf '\e[2K\e[?25l\e8'
}

kill_music () {
    # Do nothing if mpg321 is not running
    if [ -z "$(pgrep mpg321)" ]; then
        return

    # If mpg321 is suspended, resume & send 2 SIGINTs to kill it
    elif [[ $(ps -o s= -p "$(pgrep mpg321)") == "T" ]]; then
        kill -CONT "$(pgrep mpg321)"
        2>/dev/null 1>&2 killall -s SIGINT mpg321
        2>/dev/null 1>&2 killall -s SIGINT mpg321

    elif [ -n "$(pgrep mpg321)" ]; then
        2>/dev/null 1>&2 killall -s SIGINT mpg321
        2>/dev/null 1>&2 killall -s SIGINT mpg321
    fi
}

reload () {
    # Reload screen twice, first time updates status_line,
    # second time updates COLOR_CURRENT_SONG
    sleep 0.1
    clear_screen
    redraw
    clear_screen
    redraw
}

key() {
    case "$1" in

        # Execute command
        "${KEY_COMMAND:=:}")
            cmd_line ":"

            # Quit
            if [[ "$cmd_reply" == "q" ]]; then
                clear
                exit
            fi
        ;;

        # Open dir / Play song
        # "${KEY_CHILD5:=""}")
        "${KEY_CHILD1:=l}"|\
        "${KEY_CHILD2:=C}"|\
        "${KEY_CHILD3:=$'\eOC'}"|\
        "${KEY_CHILD4:=$'\e[C'}")
            ((search == 1 && search_end_early != 1)) && open "$PWD"
            if [[ ${list[scroll]} == *.mp3 ]]; then
                kill_music
                2>/dev/null 1>&2 mpg321 "${list[scroll]}" &
                IS_PAUSED=false
                reload
            elif [[ -d ${list[scroll]} ]]; then
                open "${list[scroll]}"
            fi
            redraw
        ;;

        # Go to the parent directory
        "${KEY_PARENT1:=h}"|\
        "${KEY_PARENT2:=D}"|\
        "${KEY_PARENT3:=$'\177'}"|\
        "${KEY_PARENT4:=$'\eOD'}"|\
        "${KEY_PARENT5:=$'\e[D'}"|\
        "${KEY_PARENT6:=$'\b'}")
            # If a search was done, clear the results and open the current dir
            if ((search == 1 && search_end_early != 1)); then
                open "$PWD"

            # If '$PWD' is not $MUSIC_DIRECTORY or a subdirectory
            # of, don't go to parent
            elif [[ "$PWD" = *"$MUSIC_DIRECTORY/"* ]]; then
                find_previous=1
                open "${PWD%/*}"
            fi
        ;;

        # Scroll down
        "${KEY_SCROLL_DOWN1:=j}"|\
        "${KEY_SCROLL_DOWN2:=$'\eOB'}"|\
        "${KEY_SCROLL_DOWN3:=$'\e[B'}"|\
        "${KEY_SCROLL_DOWN4:=B}")
            ((scroll < list_total)) && {
                ((scroll++))
                ((y < max_items )) && ((y++))

                format_line "$((scroll-1))"
                printf '\n'
                format_line "$scroll"
                status_line
            }
        ;;

        # Scroll up
        "${KEY_SCROLL_UP1:=k}"|\
        "${KEY_SCROLL_UP1:=$'\eOA'}"|\
        "${KEY_SCROLL_UP1:=$'\e[A'}"|\
        "${KEY_SCROLL_UP2:=A}")
            ((scroll > 0)) && {
                ((scroll--))

                format_line "$((scroll+1))"

                if ((y < 2)); then
                    printf '\e[1L'
                else
                    printf '\e[A'
                    ((y--))
                fi

                format_line "$scroll"
                status_line

            }
        ;;

        # Go to top
        "${KEY_TO_TOP:=g}")
            ((scroll != 0)) && {
                ((scroll=0))
                redraw
            }
        ;;

        # Go to bottom
        "${KEY_TO_BOTTOM:=G}")
            ((scroll != list_total)) && {
                ((scroll=list_total))
                redraw
            }
        ;;

        # Search
        "${KEY_SEARCH:=/}")
            cmd_line "/" "search"

            # If the search came up empty, redraw the current dir
            if [[ -z ${list[*]} || -z $cmd_reply ]]; then
                list=("${cur_list[@]}")
                ((list_total=${#list[@]}-1))
                redraw
                search=
            else
                search=1
            fi
        ;;

        # Mark songs to play
        "${KEY_MARK_PLAYLIST:=" "}")
            mark "$scroll" "$1"
            # Scroll down one item when a file is selected
            ((scroll < list_total)) && {
                ((scroll++))
                ((y < max_items )) && ((y++))

                format_line "$((scroll-1))"
                printf '\n'
                format_line "$scroll"
                status_line
            }

        ;;


        "${KEY_PLAY_PLAYLIST:=""}")
            ((search == 1 && search_end_early != 1)) && open "$PWD"

            if ((${#marked_files[@]} != 0)); then
                playlist_file="${HOME}/.cache/shellaro/playlist"
                # Save marked files to a file and open them for editing
                printf '%s\n' "${marked_files[@]}" > "$playlist_file"

                kill_music
                2>/dev/null 1>&2 mpg321 --list "$playlist_file" &

                marked_files=()
                reload

            elif [[ ${list[scroll]} == *.mp3 ]]; then
                kill_music
                2>/dev/null 1>&2 mpg321 "${list[scroll]}" &
                reload

            elif [[ -d ${list[scroll]} ]]; then
                open "${list[scroll]}"
            fi
            IS_PAUSED=false
            redraw

        ;;

        # Clear selection
        "${KEY_CLEAR:=x}")
            marked_files=()
            redraw
        ;;

        # Pause (suspend or resume mpg321)
        "${KEY_PAUSE_PLAY:=p}")
            # If mpg321 is not running, play
            if [ -z "$(pgrep mpg321)" ]; then
                ((search == 1 && search_end_early != 1)) && open "$PWD"

                # If list item is a dir, play all in dir
                if [[ -d ${list[scroll]} ]]; then
                    2>/dev/null 1>&2 mpg321 "${list[scroll]}" -B --shuffle &
                    IS_PAUSED=false

                # If list item is a file, play it
                elif [[ -f ${list[scroll]} ]]; then
                    2>/dev/null 1>&2 mpg321 "${list[scroll]}" &
                    IS_PAUSED=false
                fi

            # Elif process is running; suspend
            elif [[ $(ps -o s= -p "$(pgrep mpg321)") == "S" ]]; then
                kill -STOP "$(pgrep mpg321)"
                IS_PAUSED=true

            # Elif suspended; resume
            elif [[ $(ps -o s= -p "$(pgrep mpg321)") == "T" ]]; then
                kill -CONT "$(pgrep mpg321)"
                IS_PAUSED=false
            fi

            reload
        ;;

        # Next Song
        "${KEY_NEXT:=n}")
            if [[ $(ps -o s= -p "$(pgrep mpg321)") == "T" ]]; then
                kill -CONT "$(pgrep mpg321)"
                IS_PAUSED=false
            fi

            # A single SIGINT (ctrl-c) in mpg321 goes to the next song
            2>/dev/null 1>&2 killall -s SIGINT mpg321

            reload
        ;;

        # Go to $MUSIC_DIRECTORY
        "${KEY_GO_HOME1:=\`}"|\
        "${KEY_GO_HOME2:=0}"|\
        "${KEY_GO_HOME3:=~}")
            open "$MUSIC_DIRECTORY"
        ;;

        # Play All In PWD
        "${KEY_PLAY:=a}")
            ((search == 1 && search_end_early != 1)) && open "$PWD"
            if [[ -d ${list[scroll]} ]]; then
                kill_music
                2>/dev/null 1>&2 mpg321 "${list[scroll]}" -B &
            elif [[ -f ${list[scroll]} ]]; then
                kill_music
                2>/dev/null 1>&2 mpg321 ./*.mp3 &
            else
                return
            fi
            IS_PAUSED=false
            reload
        ;;

        # Shuffle All In PWD
        "${KEY_SHUFFLE:=s}")
            ((search == 1 && search_end_early != 1)) && open "$PWD"
            if [[ -d ${list[scroll]} ]]; then
                kill_music
                2>/dev/null 1>&2 mpg321 "${list[scroll]}" -B --shuffle &
            elif [[ -f ${list[scroll]} ]]; then
                kill_music
                2>/dev/null 1>&2 mpg321 ./*.mp3 --shuffle &
            else
                return
            fi
            IS_PAUSED=false
            reload
        ;;

        # Shuffle All In $MUSIC_DIRECTORY
        "${KEY_SHUFFLE_ALL:=S}")
            ((search == 1 && search_end_early != 1)) && open "$PWD"
            kill_music
            2>/dev/null 1>&2 mpg321 "$MUSIC_DIRECTORY" -B --shuffle &
            IS_PAUSED=false
            reload
        ;;

        # Volume Up
        "${KEY_VOL_UP1:=u}"|\
        "${KEY_VOL_UP2:=+}")
            2>/dev/null 1>&2 amixer -D pulse sset Master 5%+ unmute
            redraw
        ;;

        # Volume Down
        "${KEY_VOL_DOWN1:=d}"|\
        "${KEY_VOL_DOWN2:=-}")
            2>/dev/null 1>&2 amixer -D pulse sset Master 5%-
            redraw
        ;;

        # Set Volume
        "${KEY_SET_VOLUME1:=v}"|\
        "${KEY_SET_VOLUME2:==}")
            cmd_line "Set Volume [0-100]: "
            # if cmd_reply is between 0 & 100
            if [ "$cmd_reply" -ge 0 ] && [ "$cmd_reply" -le 100 ]; then
                2>/dev/null 1>&2 amixer -D pulse sset Master "${cmd_reply}"%
            fi
            redraw
        ;;

        # Mute / Unmute
        "${KEY_TOGGLE_MUTE:=m}")
            2>/dev/null 1>&2 amixer -D pulse sset Master toggle
            if [ -n "$(amixer -D pulse get Master | grep '\[off\]')" ]; then
                IS_MUTED=true
            else
                IS_MUTED=false
            fi
            redraw
        ;;

        # Jump To Favs
        [1-9])
            favorite="SHORTCUT_${1}"
            favorite="${!favorite}"

            [[ $favorite ]] &&
                open "$favorite"
        ;;

        # Kill mpg321
        "${KEY_KILL:=K}")
            kill_music
            reload
        ;;

        # Redraw, useful when bugs appear!
        "${KEY_RELOAD_DIR:=r}")
            clear_screen
            redraw full
        ;;

        # Create a new instance of the program
        # and exit the current instance (for testing)
        "${KEY_RESTART:=R}")
            clear_screen
            sleep .2
            ~/GitHub/shellaro/shellaro "$0" && exit
        ;;

        # Quit
        q|Q)
            clear
            echo "" > "${HOME}/.cache/shellaro/playlist"
            exit
        ;;
    esac
}

main() {
    # Do nothing if cd fails
    cd "${2:-$1}" &>/dev/null ||:

    [[ $1 == -v ]] && {
        printf '%s\n' "shellaro 1.1"
        exit
    }

    # bash 5 and some versions of bash 4 don't allow SIGWINCH to interrupt
    # a 'read' command and instead wait for it to complete. In this case it
    # causes the window to not redraw on resize until the user has pressed
    # a key (causing the read to finish). This sets a read timeout on the
    # affected versions of bash
    ((BASH_VERSINFO[0] > 3)) &&
        read_flags=(-t 0.05)

    # 'nocaseglob': Glob case insensitively (Used for case insensitive search)
    # 'nullglob':   Don't expand non-matching globs to themselves
    shopt -s nocaseglob nullglob

    # Trap the exit signal (we need to reset the terminal to a useable state.)
    trap 'reset_terminal' EXIT

    # Trap the window resize signal (handle window resize events)
    trap 'get_term_size; redraw' WINCH

    mkdir -p "${HOME}/.cache/shellaro"
    touch "${HOME}/.cache/shellaro/playlist"

    open "$MUSIC_DIRECTORY"

    setup_options

    get_term_size
    setup_terminal
    set_initial_status
    redraw full

    # Vintage infinite loop.
    for ((;;)); {
        read "${read_flags[@]}" -srn 1 && key "$REPLY"

        # Exit if there is no longer a terminal attached
        [[ -t 1 ]] || exit 1
    }
}

main "$@"
